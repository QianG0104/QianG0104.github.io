<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://qiang0104.github.io</id>
    <title>渡江人</title>
    <updated>2020-05-20T08:06:00.186Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://qiang0104.github.io"/>
    <link rel="self" href="https://qiang0104.github.io/atom.xml"/>
    <subtitle>@渡江人-ZhangJinqian的个人主页</subtitle>
    <logo>https://qiang0104.github.io/images/avatar.png</logo>
    <icon>https://qiang0104.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 渡江人</rights>
    <entry>
        <title type="html"><![CDATA[PicLab综合图像处理系统]]></title>
        <id>https://qiang0104.github.io/post/piclab/</id>
        <link href="https://qiang0104.github.io/post/piclab/">
        </link>
        <updated>2020-01-04T05:52:46.000Z</updated>
        <content type="html"><![CDATA[<p>大四有一门课叫做图像处理，<br>
另外还有个实践课叫图像处理综合实践</p>
<p>于是决定带小伙伴们莽一波</p>
<p>就把图像处理课上的功能都囊括进了这个综合图像处理系统里，<br>
取名PicLab</p>
<p>GitHub链接：https://github.com/QianG0104/PicLab--A_Image_Process_System</p>
<p>面对复杂的的任务，可以先进行高度的拆分和抽象，<br>
我将图像处理流程拆分成了三大部分：<br>
平行遍历，多值收集+多值处理，单值输出</p>
<p>在此基础上，我编写了一个叫做Iterator的类，我也叫它通用迭代器<br>
这个类除了构造函数外主要带有三个基本的类方法<br>
分别取名叫取样、收集、映射，来完成上面所说的三大部分工作</p>
<p>纵观图像处理这门课程，<br>
无论是在空间域还是频域，<br>
无论是做图像变换、增强、平滑与锐化、伪彩色等等任务，<br>
都完全可以直接通过组合上述三个函数来实现，<br>
所以无论要实现哪种图像处理，套用公式来机械性组装即可</p>
<p>所以我完成了所有类的编写和基本函数的实现之后，<br>
在注释里详细的标注了如何对上述三个函数进行传参和调用，<br>
剩下的机械性工作交给队员们就没有太大压力了，上手极快，<br>
而且后期很容易继续拓展和修改。</p>
<p>详细的介绍可以在GitHub里查看我当时的课程汇报PPT和代码注释</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[智能拼音输入法]]></title>
        <id>https://qiang0104.github.io/post/pinyin_input/</id>
        <link href="https://qiang0104.github.io/post/pinyin_input/">
        </link>
        <updated>2019-07-20T06:50:53.000Z</updated>
        <content type="html"><![CDATA[<p>习作<br>
《随机信号处理》课程实践<br>
主要的思路是将输入的拼音串视为输入信号，所求的输出是由拼音串推出的汉字串。</p>
<p>GitHub链接:https://github.com/QianG0104/PinYin_Input_Method</p>
<p>主要的算法是维特比算法，理论基础是隐马尔科夫模型</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[博弈树四子棋]]></title>
        <id>https://qiang0104.github.io/post/alpha-beta-tree_chess/</id>
        <link href="https://qiang0104.github.io/post/alpha-beta-tree_chess/">
        </link>
        <updated>2019-04-05T07:08:38.000Z</updated>
        <content type="html"><![CDATA[<p>四子棋游戏：游戏双方持不同颜色的棋子，分先后手依次落子，规则为：在M行N列的棋盘中，起手每次只能在每一列当前最底部落子，若某一列已经落满，则不能再该列中落子。当某一方在横、纵、斜四个方向中任意一个方向上先使自己的棋子连成四个或以上则取胜，若棋盘落满时双方都没能达成目标则为平局。此问题是经典的棋类博弈问题，使用alpha-beta剪枝算法解决</p>
<p>GitHub链接：https://github.com/QianG0104/Connect_Four_Player</p>
<p>落子策略：极小极大算法<br>
选用博弈论中常见的极小极大（MinMax）算法进行决策选择，具体实现方案为递归式，流程如下：<br>
（1）对于每一个待落子的M行N列棋盘（搜索深度初始为0），遍历其N个候选落子点（搜索深度+1），得到最终返回值作为其评估值，选择估值最大的位置作为最终落子点；<br>
（2）每一深度的候选落子点同样搜索自己落子后棋盘上的N个候选落子点（搜索深度+1），得到N个返回值。若此深度属于己方落子，则以下一深度给出的N个返回值中的最小值作为本落子点评估值；若属于对方落子，则以N个返回值中的最大值作为评估值。<br>
（3）当搜索深度达到预设的最大值，或游戏结束（一方获胜或棋盘已满）时，不再搜索下一深度，按照2.2中的方案评估当前整个棋盘得出评价值并返回</p>
<p>博弈树示例<br>
<img src="https://qiang0104.github.io/post-images/1589958652486.png" alt="" loading="lazy"></p>
<p>以列数为3、行数为4的棋盘为示例，设最大搜索深度为2，则一个博弈树如上图所示。最终，程序决策委在棋盘右下角落子</p>
<p>局面估值方案：模式匹配与启发式算法<br>
对于MinMax博弈树，由于计算资源不是无限的，因此不能搜索整个博弈树到任意深度，而是以某一深度作为上限，这时后续深度的发展情况是未知的，因此需要以已知局面进行启发，计算后续发展情况的近似值，以替代真正的搜索返回值。<br>
本游戏中，采取的估值方案为利用模式匹配识别棋盘上组成的连子数目和后续可利用空间。根据四子棋的游戏规则，并经过多次人机游戏总结经验，对下列情形从高到低赋予不同的分值：<br>
（1）“成四”：一条线上连续4个棋子，获胜。<br>
（2）“活三”：一条线上连续3个棋子，且两端均为空，最容易发展为“成四”。其难易度随着两端空位到自身所在列的列顶的距离增大而降低。一般认为距离在0-2格时有较高价值，3-4格有一定价值，再高则价值偏低。<br>
（3）“单三”：一条线上连续3个棋子，且有一端为空，有机会发展为“成四”。其价值高低与“活三”同理。<br>
（4）“活二”：一条线上连续2个棋子，容易发展为“活三”或“单三”。其价值高低与“活三”同理。<br>
（5）“单二”：一条线上连续2个棋子，有机会发展为“单三”。其价值高低与“活三”同理。<br>
（6）“单子”：单独1个棋子，且至少一个方向上的相邻位置为空，有机会发展为“单二”或“活二”。其价值高低与“活三”同理。<br>
当考察对象为己方棋子时，得到的估值为“进攻性”的估值，当考察对象为对方棋子时，得到“防守性”的估值。对于每一个需要估值的局面，分别从进攻和防守两个角度取其横、纵、斜四个方向上估值之和，所得结果进行加权（己方为正值，对方为负值）即可得到兼顾进攻与防守的综合估值。<br>
估值的准确性依赖于对各个基础模式的赋值，越丰富的模式库和越适当的赋值就能越好地给出局面后续演化到终点时的近似值，实现越好的决策启发</p>
<p>优化1：估值衰减<br>
若在不同深度下，按上述方案计算得到了同样的估值，选取深度更浅的走法总是更为有利的（前提是模式赋值具备足够合理性）。因此应当在2.2方案的基础上使估值随深度衰减，以程序作出更有利的决策。<br>
一个较为简单的衰减算法是线性衰减，公式见GitHub说明文档</p>
<p>优化2：alpha-beta减枝搜索<br>
在整个博弈树中，一些分支可以证明没有搜索的必要。alpha-beta减枝给出了以下两种情形：<br>
情形一（alpha剪枝）：当前深度下为己方落子，会从下一深度选择返回值最大的分支，而上一深度必选择当前深度返回值最小的分支。一旦遇到下一深度的返回值出现了大于上一深度已知最小值的情形，上一深度必然放弃当前分支。<br>
情形二（beta剪枝）：当前深度下为对方落子，会从下一深度选择返回值最小的分支，而上一深度必选择当前深度返回值最大的分支。一旦遇到下一深度的返回值出现了小于上一深度已知最大值的情形，上一深度必然放弃当前分支</p>
<p>所列举的模式及其分值<br>
成四：100000000<br>
活三：100000<br>
单三：10000<br>
活二：100<br>
单二：10<br>
单子：1</p>
<p>优化的打分算法<br>
一个很容易想到的打分方法是分横、纵、左斜、右斜四个方向分别遍历棋盘，识别出所有模式并将所有分值按评分规则汇总。为了加快程序运行的速度，我设计了一个方法，用四个二维数组分别记录局面分值，仅需对棋盘遍历一次即可完成四个方向分值的汇总。<br>
该快速汇总方法的原理如下图所示<br>
<img src="https://qiang0104.github.io/post-images/1589958879227.png" alt="" loading="lazy"><br>
从棋盘左上角开始遍历，每到一个格子，得到该处的棋子值，棋子值有：空、用户、机器、边界（含不可落子点）四种值。根据该值更新代表横竖斜四个方向的四个数组数据。<br>
对于上述四个二维数组中的任意一个，其第一个维度代表列的编号，第二个维度记录四个量：当前棋子值、当前棋子连续次数、前一棋子值、后一棋子值。<br>
每次走到新的格子，会根据该格坐标找到数组中对应的列编号，将新格子的值与数组中的当前棋子值对比，若相同，则棋子连续次数自增1；若不同，则将新值记录进“后一棋子值”，便得到了上一个连续棋子串的种类、数目和头尾空间情况信息，从而进行一次打分并记录。<br>
之后重新初始化数组中的该列，将“前一棋子”值记录为原“当前棋子”的值，“当前棋子”记录新格中棋子值，连续次数置为1，“后一棋子”根据下一格传来的新值刷新。<br>
函数还会根据棋子坐标进行一些判断，来处理不可落子和棋盘边缘的情况</p>
<p>类的声明及主要成员<br>
situation类（局面类），包含一个记录棋盘的二维数组map[ ][ ]（非const），记录棋盘实时信息；一些变量如整型值M、N、nx、ny、depth等，辅助记录棋盘的边界、不可落子点、当前搜索深度等信息</p>
<p>估值函数<br>
返回一个double值作为当前局面的估值</p>
<p>递归函数<br>
用递归的方法建立博弈树。主要流程如下：<br>
（1）落子：<br>
被调用时得到传入参数Y（上层指定的落子点的y坐标）和bestbro（上层已知最优候选值），根据Y找到map[ ][ ]中的对应空位进行落子，并使depth自增1。<br>
（2）判断：<br>
对当前局面进行判断，若游戏结束（一方获胜或平局）或深度depth达到上限，执行（3），否则执行（4）。<br>
（3）评分：<br>
运行估值函数，得出当前局面估值并记录进准备作为返回值的变量中。<br>
（4）模拟：<br>
从0到（N-1）依次作为Y参数调用递归函数实现下一层搜索，每一次调用之前刷新当前最优候选值作为传给下一层的bestbro参数。完成所有模拟后将最优候选值记录进准备作为返回值的变量中。<br>
（5）回滚：<br>
将第（1）步在棋盘内的落子移除，并使depth自减1。<br>
（6）返回最优候选值</p>
<p>最终决策函数<br>
上述递归函数实际上是从depth=1层开始构建博弈树，而博弈树的根节点（depth=0）由此函数建立并完成收集所有后代节点返回值、做出最终决策的工作。其最终返回给getPoint函数一个值作为其y坐标值，而x值由getPoint函数中调用top数组得到</p>
<p>其它辅助函数<br>
包含判断游戏结束、具体模式评分等</p>
<p>实验结果及分析<br>
改变最大深度的值，通过模拟棋局的结果数据发现，在对手相同的情况下，最大搜索深度越小，胜率越低；增大最大搜索深度，程序落子时间变长，但胜率不断提高，能战胜难度更高的对手。当最大搜索深度取6时，本AI达到的棋力水平大约在TestCases中55~60之间</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[局域网联网对战中国象棋]]></title>
        <id>https://qiang0104.github.io/post/Online_Chess/</id>
        <link href="https://qiang0104.github.io/post/Online_Chess/">
        </link>
        <updated>2018-08-30T07:01:41.000Z</updated>
        <content type="html"><![CDATA[<p>中国象棋属于二人对抗性游戏的一种，本习作基于Qt实现了支持网络对战的象棋软件，还支持残局的保存与恢复</p>
<p>GitHub链接：https://github.com/QianG0104/Chinese_Chess_Player</p>
<p>基本规则：<br>
以下三种情况被认为己方负：<br>
（1）	己方的帅（将）被对方棋子吃掉。（此处设计为将死或将被吃掉均可）<br>
（2）	己方发出认输请求。<br>
（3）	己方走棋超出每步时间限制。</p>
<p>软件功能：<br>
（1）	实现软件的主界面和菜单栏，点击菜单栏弹出弹窗进行连接。<br>
（2）	server端等待连接时可以取消，client端能输入对战的IP及端口，并显示成功建立连接。<br>
（3）	QT绘制象棋棋盘及棋子。<br>
（4）	软件能依据规则正确走子。<br>
（5）	软件能自动判断胜负，被将军时发出特殊音效；提供了认输按钮，一方认输游戏结束；每步走子有时间限制，超时判负。<br>
（6）	游戏结束，在server端和client端分别弹窗说明游戏结束，并注明获胜方。<br>
（7）	菜单栏拥有残局输入的入口，选择文件载入加载残局，建立连接进行对战。<br>
（8）	残局对战的保存文件要求采用固定格式（后附说明）。<br>
（9）	对战进行中可以点击相应按钮，保存残局到本地文件，此时server/client端都会将残局保存到本地文件</p>
<p>残局文件格式<br>
以字符串方式保存，方便助教检查作业时进行测试。<br>
文件分为两部分，每部分第一行代表颜色（red/black）<br>
接下来有7行，分别代表将/士/象/马/车/炮/兵的棋子位置<br>
每行第一个数代表该种棋子的数量n，代表该类棋子的数目，之后会有n个格式为&lt;x,y&gt;的坐标，代表n个棋子的位置。（坐标原点为红方的左下点，记作&lt;0,0&gt;）</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[WELCOME]]></title>
        <id>https://qiang0104.github.io/post/welcome/</id>
        <link href="https://qiang0104.github.io/post/welcome/">
        </link>
        <updated>2018-01-04T05:45:10.000Z</updated>
        <content type="html"><![CDATA[<p>欢迎来到QianG的GitHub主页。</p>
<p>在这里我上传了一些从学习编程以来的个人小习作，</p>
<p>从比较早期的程序比如自动还原魔方</p>
<p>到后来稍微具有一点儿规模的应用程序<br>
比如中国象棋（带GUI）、AI四子棋（带GUI）、拼音输入法等等</p>
<p>以及带领小团队编写的综合图像处理系统PicLab（带GUI）</p>
<p>另外还有一些神经网络方面的实践<br>
RNN的文本情绪识别（也尝试了CNN就是结果比较惨不忍睹）<br>
RankIQA图像质量评估<br>
基于深度学习的SAR图像车辆目标自动识别（正在做的毕业设计）</p>
<p>目前上传的项目并不多，主要作为展示之用。<br>
在数学建模竞赛中的一些更多的习作还有待整理。</p>
]]></content>
    </entry>
</feed>